syntax = "proto3";

package scuffle.video.v1.types;

import "scuffle/types/ulid.proto";

// An event that occurred and is sent to the client via the event stream.
message Event {
  // A recording event.
  message Recording {
    // The ULID of the recording that this event is for.
    scuffle.types.Ulid recording_id = 1;

    // If the recording was created.
    message Created {}
    // If the recording was completed.
    message Completed {}

    // If the recording has started to be deleted.
    message DeleteStarted {}

    // If the recording has been deleted.
    message DeleteComplete {}

    // If the recording failed to be deleted.
    message DeleteFailed {
      // The error that occurred.
      string error = 1;
    }

    // If the recording failed to be created.
    message Failed {
      // The error that occurred.
      string error = 1;
    }

    // If the recording was modified.
    message Modified {}

    // The event that occurred.
    oneof event {
      Created created = 2;
      Completed completed = 3;
      Modified modified = 4;
      DeleteStarted delete_started = 5;
      DeleteComplete delete_complete = 6;
      DeleteFailed delete_failed = 7;
      Failed failed = 8;
    }
  }

  // A room event.
  message Room {
    // The ULID of the room that this event is for.
    scuffle.types.Ulid room_id = 1;

    // If the room was connected to.
    // ie. the room went live.
    message Connected {
      // The ULID of the connection that was connected.
      // This is a unique identifier for the connection.
      scuffle.types.Ulid connection_id = 1;
    }

    // If the room was disconnected from.
    message Disconnected {
      // The ULID of the connection that was disconnected.
      scuffle.types.Ulid connection_id = 1;
      // If the disconnection was clean. Meaning the client disconnected and it
      // was handled gracefully.
      bool clean = 2;
      // If the disconnection was forced. Meaning the client was disconnected by
      // the server. This is usually due to bitrate / bandwidth issues or a
      // different client connecting.
      bool forced = 3;
    }

    // If the room is ready to be watched.
    message Ready {
      // The ULID of the connection that is ready.
      scuffle.types.Ulid connection_id = 1;
    }

    // If the room was deleted.
    message Deleted {}

    // If the room was modified.
    message Modified {}

    // If the room failed to be go live.
    message Failed {
      // The error that occurred.
      string error = 1;
    }

    // The event that occurred.
    oneof event {
      Connected connected = 2;
      Disconnected disconnected = 3;
      Ready ready = 4;
      Deleted deleted = 5;
      Modified modified = 6;
      Failed failed = 7;
    }
  }

  // An access_token event.
  message AccessToken {
    // The ULID of the access_token that this event is for.
    scuffle.types.Ulid access_token_id = 1;

    // If the access_token was created.
    message Created {}

    // If the access_token was deleted.
    message Deleted {}

    // If the access_token was modified.
    message Modified {}

    // The event that occurred.
    oneof event {
      Created created = 2;
      Deleted deleted = 3;
      Modified modified = 4;
    }
  }

  // A playback key pair event.
  message PlaybackKeyPair {
    // The ULID of the playback key pair that this event is for.
    scuffle.types.Ulid playback_key_pair_id = 1;

    // If the playback key pair was created.
    message Created {}

    // If the playback key pair was deleted.
    message Deleted {}

    // If the playback key pair was modified.
    message Modified {}

    // The event that occurred.
    oneof event {
      Created created = 2;
      Deleted deleted = 3;
      Modified modified = 4;
    }
  }

  // A recording config event.
  message RecordingConfig {
    // The ULID of the recording config that this event is for.
    scuffle.types.Ulid recording_config_id = 1;

    // If the recording config was created.
    message Created {}

    // If the recording config was deleted.
    message Deleted {}

    // If the recording config was modified.
    message Modified {}

    // The event that occurred.
    oneof event {
      Created created = 2;
      Deleted deleted = 3;
      Modified modified = 4;
    }
  }

  // A transcoding config event.
  message TranscodingConfig {
    // The ULID of the transcoding config that this event is for.
    scuffle.types.Ulid transcoding_config_id = 1;

    // If the transcoding config was created.
    message Created {}

    // If the transcoding config was deleted.
    message Deleted {}

    // If the transcoding config was modified.
    message Modified {}

    // The event that occurred.
    oneof event {
      Created created = 2;
      Deleted deleted = 3;
      Modified modified = 4;
    }
  }

  // S3 Bucket event.
  message S3Bucket {
    // The ULID of the S3 Buckets that this event is for.
    scuffle.types.Ulid s3_buckets_id = 1;

    // If the S3 Buckets was created.
    message Created {}

    // If the S3 Buckets was deleted.
    message Deleted {}

    // If the S3 Buckets was modified.
    message Modified {}

    // The event that occurred.
    oneof event {
      Created created = 2;
      Deleted deleted = 3;
      Modified modified = 4;
    }
  }

  // The timestamp of the event. In milliseconds since the UNIX epoch.
  int64 timestamp = 1;

  // The ULID of the event. This is a unique identifier for the event.
  // Used for acknowledge the event.
  scuffle.types.Ulid event_id = 2;

  oneof event {
    Recording recording = 3;
    Room room = 4;
    AccessToken access_token = 5;
    PlaybackKeyPair playback_key_pair = 6;
    RecordingConfig recording_config = 7;
    TranscodingConfig transcoding_config = 8;
    S3Bucket s3_bucket = 9;
  }
}
